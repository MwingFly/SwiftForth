(lldb) help command alias
'alias' allows the user to create a short-cut or abbreviation for long 
    commands, multi-word commands, and commands that take particular options. 
    Below are some simple examples of how one might use the 'alias' command: 
    
    'command alias sc script'            // Creates the abbreviation 'sc' for the 'script' 
                                         // command. 
    'command alias bp breakpoint'        // Creates the abbreviation 'bp' for the 'breakpoint' 
                                         // command.  Since breakpoint commands are two-word 
                                         // commands, the user will still need to enter the 
                                         // second word after 'bp', e.g. 'bp enable' or 
                                         // 'bp delete'. 
    'command alias bpl breakpoint list'  // Creates the abbreviation 'bpl' for the 
                                         // two-word command 'breakpoint list'. 
    
An alias can include some options for the command, with the values either 
    filled in at the time the alias is created, or specified as positional 
    arguments, to be filled in when the alias is invoked.  The following example 
    shows how to create aliases with options: 
    
    'command alias bfl breakpoint set -f %1 -l %2' 
    
This creates the abbreviation 'bfl' (for break-file-line), with the -f and -l 
    options already part of the alias.  So if the user wants to set a breakpoint 
    by file and line without explicitly having to use the -f and -l options, the 
    user can now use 'bfl' instead.  The '%1' and '%2' are positional placeholders 
    for the actual arguments that will be passed when the alias command is used. 
    The number in the placeholder refers to the position/order the actual value 
    occupies when the alias is used.  All the occurrences of '%1' in the alias 
    will be replaced with the first argument, all the occurrences of '%2' in the 
    alias will be replaced with the second argument, and so on.  This also allows 
    actual arguments to be used multiple times within an alias (see 'process 
    launch' example below).  
    Note: the positional arguments must substitute as whole words in the resultant
    command, so you can't at present do something like:
    
    command alias bcppfl breakpoint set -f %1.cpp -l %2
    
    to get the file extension ".cpp" automatically appended.  For more complex
    aliasing, use the "command regex" command instead.
    
So in the 'bfl' case, the actual file value will be 
    filled in with the first argument following 'bfl' and the actual line number 
    value will be filled in with the second argument.  The user would use this 
    alias as follows: 
    
    (lldb)  command alias bfl breakpoint set -f %1 -l %2 
    <... some time later ...> 
    (lldb)  bfl my-file.c 137 
    
This would be the same as if the user had entered 
    'breakpoint set -f my-file.c -l 137'. 
    
Another example: 
    
    (lldb)  command alias pltty  process launch -s -o %1 -e %1 
    (lldb)  pltty /dev/tty0 
           // becomes 'process launch -s -o /dev/tty0 -e /dev/tty0' 
    
If the user always wanted to pass the same value to a particular option, the 
    alias could be defined with that value directly in the alias as a constant, 
    rather than using a positional placeholder: 
    
    command alias bl3  breakpoint set -f %1 -l 3  // Always sets a breakpoint on line 
                                                   // 3 of whatever file is indicated. 

Syntax: command alias <alias-name> <cmd-name> [<options-for-aliased-command>]


----

Forth example:

command alias s thread step-inst
command alias bye quit

etc.